name: Linear GraphQL Mutation

on:
  pull_request:
    types:
      - closed

## TODO: create a step that parses the PR comments, finds the Linear bot, and extracts the issue ID
## TODO: use the issue ID as a target when updating the label
## TODO: create a "Next Release" label and hard-code the UUID here

jobs:
  if_merged:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    env:
      PR_NUMBER: ${{ github.event.number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Echo PR number
        run: echo "PR number is $PR_NUMBER"

      - name: Look for "Linear" author in PR comments and extract issue ID, which starts with "ACK-"
        run: |
          # Extract the issue ID from the PR comments
          issue_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments | jq -r '.[] | select(.user.login == "linear") | .body' | grep -oP 'ACK-\d+')
          echo "Issue ID is $issue_id"
          echo "::set-env name=ISSUE_ID::$issue_id"

      # - name: Set issue labels
      #   run: |
      #     label_uuid="9d52286c-6256-42b4-bf41-ebf3b1f8b5ff"
      #     curl -X POST \
      #       -H "Authorization: ${{ secrets.LINEAR_ACCESS_TOKEN }}" \
      #       -H "Content-Type: application/json" \
      #       -d "{\"query\": \"mutation IssueAddLabel { issueAddLabel( id: \\\"LAND-420\\\", labelId: \\\"$label_uuid\\\" ) { success issue { id title state { id name } } } }\"}" \
      #       https://api.linear.app/graphql
